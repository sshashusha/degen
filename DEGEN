// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol";

contract WonderlaToken is ERC20, Ownable, ERC20Burnable {
    event Redeemed(string message);

    enum EntryType { Child, Adult, Special }

    mapping(EntryType => uint256) public entryCosts;
    EntryType public lastRedeemedEntry;

    constructor(address initialOwner) Ownable(initialOwner) ERC20("Wonderla Token", "WLT") {
        initializeEntryCosts();
    }

    function initializeEntryCosts() internal {
        entryCosts[EntryType.Child] = 800;
        entryCosts[EntryType.Adult] = 1200;
        entryCosts[EntryType.Special] = 0; // Special entry is free
    }

    function updateEntryCost(EntryType entryType, uint256 cost) external onlyOwner {
        entryCosts[entryType] = cost;
    }

    function minttokens(address recipient, uint256 amount) external onlyOwner {
        _mint(recipient, amount);
    }

    function transfertokens(address recipient, uint256 amount) external {
        require(balanceOf(msg.sender) >= amount, "INSUFFICIENT TOKENS!");
        _transfer(msg.sender, recipient, amount);
    }

    function burntokens(uint256 amount) external {
        require(balanceOf(msg.sender) >= amount, "INSUFFICIENT TOKENS!");
        _burn(msg.sender, amount);
        emit Redeemed("Entries burned successfully");
    }

    function redeemEntryByName(string calldata entryName) external {
        EntryType entryType = getEntryTypeByName(entryName);
        uint256 cost = entryCosts[entryType];

        require(cost > 0, "Invalid entry type");
        require(balanceOf(msg.sender) >= cost, "INSUFFICIENT TOKENS!");

        lastRedeemedEntry = entryType;
        _burn(msg.sender, cost);
        emit Redeemed("Entry redeemed successfully");
    }

    function getMyTokenBalance() external view returns (uint256) {
        return balanceOf(msg.sender);
    }

    function getLastRedeemedEntry() external view returns (EntryType) {
        return lastRedeemedEntry;
    }

    function getEntryTypeByName(string calldata entryName) internal pure returns (EntryType) {
        if (compareStrings(entryName, "Child")) {
            return EntryType.Child;
        } else if (compareStrings(entryName, "Adult")) {
            return EntryType.Adult;
        } else if (compareStrings(entryName, "Special")) {
            return EntryType.Special;
        } else {
            revert("Invalid entry name");
        }
    }

    function compareStrings(string memory a, string memory b) internal pure returns (bool) {
        return keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b));
    }
}
